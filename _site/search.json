[
  {
    "objectID": "changelog.html",
    "href": "changelog.html",
    "title": "Cite Tools",
    "section": "",
    "text": "Released 2023-03-18."
  },
  {
    "objectID": "docs/Multiple-Bibliographies/3-Advanced/index.html",
    "href": "docs/Multiple-Bibliographies/3-Advanced/index.html",
    "title": "Multiple Bibliographies in Scrivener",
    "section": "",
    "text": "In Scrivener, you can add multiple bibliographies to your project using the strategy below. Once this is done, the only task to add new bibliography files to your project will be to paste the path to one of the files in the metadata of your document. This is a very simple task, and it can be done in a few seconds.\n\n\nFirst of all, create a new meta data field called path.\nCreate a Section Type called Multibib.\nCreate a new Section in your project, and set its Section Type to Multibib.\nPaste the path to the bibliography file in the path metadata field.\nIn the Compile formats Section Layout, add the following code to the Title Sufix of the Multibib Section:\n\n {.appendix}\n\n---\nbibliography_multibib<$linkID>: \"<$custom:Path>\"\n---\n\n::: {#refs_multibib<$linkID>}\n:::"
  },
  {
    "objectID": "docs/Multiple-Bibliographies/3-Advanced/1-Using-Multiple-Bibliographies-in-Scrivener.html",
    "href": "docs/Multiple-Bibliographies/3-Advanced/1-Using-Multiple-Bibliographies-in-Scrivener.html",
    "title": "Multiple Bibliographies in Scrivener",
    "section": "",
    "text": "In Scrivener, you can add multiple bibliographies to your project using the strategy below. Once this is done, the only task to add new bibliography files to your project will be to paste the path to one of the files in the metadata of your document. This is a very simple task, and it can be done in a few seconds.\n\n\nFirst of all, create a new meta data field called path.\nCreate a Section Type called Multibib.\nCreate a new Section in your project, and set its Section Type to Multibib.\nPaste the path to the bibliography file in the path metadata field.\nIn the Compile formats Section Layout, add the following code to the Title Sufix of the Multibib Section:\n\n {.appendix}\n\n---\nbibliography_multibib<$linkID>: \"<$custom:Path>\"\n---\n\n::: {#refs_multibib<$linkID>}\n:::"
  },
  {
    "objectID": "docs/Multiple-Bibliographies/Multibib-in-Scrivener.html",
    "href": "docs/Multiple-Bibliographies/Multibib-in-Scrivener.html",
    "title": "Multiple Bibliographies in Scrivener",
    "section": "",
    "text": "In Scrivener, you can add multiple bibliographies to your project using the strategy below. Once this is done, the only task to add new bibliography files to your project will be to paste the path to one of the files in the metadata of your document. This is a very simple task, and it can be done in a few seconds.\n\n\nFirst of all, create a new meta data field called path.\nCreate a Section Type called Multibib.\nCreate a new Section in your project, and set its Section Type to Multibib.\nPaste the path to the bibliography file in the path metadata field.\nIn the Compile formats Section Layout, add the following code to the Title Sufix of the Multibib Section:\n\n {.appendix}\n\n---\nbibliography_multibib<$linkID>: \"<$custom:Path>\"\n---\n\n::: {#refs_multibib<$linkID>}\n:::"
  },
  {
    "objectID": "docs/Multiple-Bibliographies/index.html",
    "href": "docs/Multiple-Bibliographies/index.html",
    "title": "Multiple Bibliographies",
    "section": "",
    "text": "In this section, we will discuss how to use multiple bibliographies in your document. In many fields, this is conditio sine qua non for academic writing and publishing. In the humanities, for example, it is common to have a bibliography for primary sources and another for secondary sources. In philosophy, sometimes they can be very nuanced with sections dedicated to original sources, translations, commentaries, and so on."
  },
  {
    "objectID": "docs/Multiple-Bibliographies/index.html#installation",
    "href": "docs/Multiple-Bibliographies/index.html#installation",
    "title": "Multiple Bibliographies",
    "section": "Installation",
    "text": "Installation\nThis extension is available on Github and can be installed using the following command:\nquarto install extension cite-tools"
  },
  {
    "objectID": "docs/Multiple-Bibliographies/2-How-to-set-it-up.html",
    "href": "docs/Multiple-Bibliographies/2-How-to-set-it-up.html",
    "title": "How to set it up",
    "section": "",
    "text": "Add bibliography files to the refs folder. Then, add the following metadata to the YAML header of your document in this way:\n---\nbibliography_primary: refs/primary.json\nbibliography_secondary: refs/secondary.json\n---\nThe path should be relative to the project’s root folder. The name of the bibliography should (but doesn’t have to) be the same as the name of the file, without the extension.\nThen, place the bibliographies placeholders in the document where you want the bibliographies to appear.\n# Primary Sources\n\n::: {#refs_primary}\n:::\n\n# Secondary Sources\n\n::: {#refs_secondary}\n:::\nEach refs_bib_name div should have a matching entry bibliography_bib_name in the metadata. They will be filled with the citations from the respective bibliography files.\nMake sure the bibliography name (bibliography_) and the placeholder div id (refs_) match, otherwise nothing will print.1\n\n\n\n\nFootnotes\n\n\nThat is, if you have a bibliography named bibliography_primary, the placeholder div should be refs-primary or refs_primary.↩︎"
  },
  {
    "objectID": "docs/Multiple-Bibliographies/1-Prime-Matter.html",
    "href": "docs/Multiple-Bibliographies/1-Prime-Matter.html",
    "title": "Prime Matter",
    "section": "",
    "text": "First of all, you will need to be able to provide a bibliography file in one of different possible formats. The most common ones are called BibLaTeX or BibTeX. However, you can also use CSL-JSON files, which is preferable since the latter faster and it is the format used by Citeproc internally to represent bibliographies.\nThere are many ways to provide a bibliography file. The most common ones are:\n\nKeeping a bibliography file yourself and updating it manually. (Viable only it small projects.)\nUsing a bibliography manager, such as Zotero, JabRef, Bookends, Bibdesk, Endnote; see also this comparison on Wikipedia. These programs allows you to edit your bibliography and export it in the desired format.\nUsing a shared bibliography on Github or a shared Zotero online library1.\n\nThe important detail here is that you need to be able to export your bibliography in one of the formats mentioned above and that you need to be able to create more than one bibliography file. Once you have this, you can proceed to the next step.\n\n\n\n\n\n\nrefs/primary.bib\n\n\n\nKeeping bibliography files inside /refs at the project’s root folder is not a requirement, but it is good pratice.\n\n\n\n\n\n\n\n\nCite Tools, not a bibliography manager\n\n\n\nThis extension is not a bibliography manager. It does not allow you to edit your bibliography. It only allows you to use multiple bibliographies in your document.\n\n\n\n\n\n\nFootnotes\n\n\nZotero online libraries can be downloaded using https://api.zotero.org/groups/LibraryIDhere/items?format=bibtex&limit=150) where LibraryIDhere should be replaced by the 7-digit code in the middle of the library URL↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cite Tools",
    "section": "",
    "text": "The vanilla Pandoc and Quarto’s Citeproc environment is powerful and its syntax is simple. It uses [@Citekey] for Author (Date) and [-@Citekey] for (Date).1\n\n\n\n\n\n\nThe advantage of this markup syntax lies in its simplicity and the compatibility with all formats supported by Pandoc, a universal document converter.\n\n\n\nThis extension introduces advanced bibliography features by bundling up several Lua filters (see below). It allows, among other things, the creation of multiple bibliographies (or bibliographies with multiple sections, such as primary sources and secondary sources), the citation of arbitrary fields from the references, such as author, editor, or translator names and title / original-title of works, and last, but not least, the creation of linked indexes of citations.\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nAdvanced\n\n\n\n\n\n\nHow to set it up\n\n\n\n\n\n\nMultiple Bibliographies\n\n\n\n\n\n\nMultiple Bibliographies in Scrivener\n\n\n\n\n\n\nPrime Matter\n\n\n\n\n\n\n\n\nNo matching items\n\n\n\nCreate multiple bibliographies (or bibliographies with multiple sections, such as primary sources and secondary sources).2\nCite arbitrary fields from the references, such as author, editor, or translator names and title / original-title of works.3\nTurn the bibliography into a linked index of citations.\n\n[[Multiple bibliographies]]\ngenerate a bibliography in all formats supported by Pandoc (which totalize more than 30 formats, including LaTeX, DOCX, HTML, EPUB, PDF, and so on)\nbut it lacks some features that are common in other bibliography typesetting mechanisms, such as BibLaTeX and BibTeX. This extension aims to fill these gaps using only Lua Filters.\n\n\nMore specifically, this bunddle seeks to address in the simplest of ways possible the following demands:\n1. Multiple bibliographies\nThe need for multiple bibliographies (or bibliographies with multiple sections, such as primary sources and secondary sources).\n\n2. Cite fields\nThe need to evoke arbitrary information from the references, such as author, editor, or translator names and title / original-title of works.\n\n\n\n@AristOp in csljson\n\n{\n    \"author\": [\n      {\n        \"family\": \"Aristotle\"\n      }\n    ],\n    \"editor\": [\n      {\n        \"family\": \"Bekker\",\n        \"given\": \"Immanuel\"\n      }\n    ],\n    \"id\": \"AristOp\",\n    \"issued\": {\n      \"date-parts\": [\n        [\n          1831\n        ]\n      ]\n    },\n    \"number-of-volumes\": \"4\",\n    \"publisher\": \"Reimer\",\n    \"publisher-place\": \"Berlim\",\n    \"title\": \"Aristotelis opera\",\n    \"type\": \"book\"\n  }\n\n3. Citation backlinks\nThe need to turn the bibliography into a linked index of cited references, with links from the entries back to each of its multiple occurences in the body of the text (e.g. in PDF/DOCX: [p. 1, p. 4, p. 10], in HTML: [1, 2, 3]) (and with the ability to turn these off globally or in an ad hoc fashion).\n\n\nOptionally, the need to split the bibliography into sections, printing the bibliography for each chapter/section/part. (For this, you must uncomment the apropriate line in the _extension.yaml file.)\n\n\n\n\nUsers of Quarto can install this extension with the following command\nquarto install extension bcdavasconcelos/citetools\nand use it by adding citetools to the filters entry in their YAML header.\n---\nfilters:\n  - citetools\n---\n\n\n\nlink-fields (boolean): Link inlines printed by citefield to their corresponding entry in the bibliography. Default: true.\nlink-citations (boolean): Link citations to their respective reference in the bibliography. Default: true. Note: if link-citations is set to false, link-fields is also set to false.\n\n\nSee sample document sample.qmd for a working example with explanations.\n\n\n\n\n\nFilters published under the MIT license by Albert Krewinkel (tarleb).\n\nmultibib\nmultiple-bibliographies\ncitation-backlinks\nsection-bibliographies\n\nFilters published under the MIT license by Albert Krewinkel (tarleb) & Bernardo Vasconcelos (bcdavasconcelos).\n\ncitefield\n\nAll Pandoc Lua filters in this extension are published under the MIT license, see file LICENSE for details.\nBack to top"
  },
  {
    "objectID": "explore.html",
    "href": "explore.html",
    "title": "Explore and setup",
    "section": "",
    "text": "With this tutorial, we have a working example website that we will explore together. We’ll learn a few rules and look for patterns to get an understanding of what things to do to help you start customizing and making it your own. And you can continue to use this website as a reference after the tutorial, along with Quarto documentation.\nWe’ll start our exploration online looking at the website architecture and GitHub repository. Then we’ll setup a copy for ourselves so that we can modify from a working example, which is a great way to learn something new. We’ll set it up so that any modifications (commits) will automatically be republished via GitHub Actions. Subsequent chapters will describe how to modify your repo using different tools (browser, RStudio, Jupyter)."
  },
  {
    "objectID": "explore.html#exploring-online",
    "href": "explore.html#exploring-online",
    "title": "Explore and setup",
    "section": "Exploring online",
    "text": "Exploring online\n\nThe website itself\nThis website has 5 things you can see on the left sidebar:\n\nWelcome\nExploring and setup\nQuarto workflows\nLearning more\nTransition from Rmd\n\nMost of these are pages, but you’ll see that “Quarto Workflows” has an arrow; it is a folder with additional pages inside.\n\n\nThe website’s repo\nLet’s go to this website’s GitHub repository (also called a “repo”), https://github.com/openscapes/quarto-website-tutorial. You can also click there from any page in this tutorial website by clicking the GitHub octocat icon underneath the Openscapes logo in the left navbar (click it holding command on Mac, or control on a PC to open it in a different tab in your browser).\nHave a look at the filenames. We can recognize the names of the webpages we’ve seen above, and they have red arrows marking them in the image below. You’ll see the “quarto-workflows” folder and the rest in this site are .qmd files, which are plain text Quarto files that can combine Markdown text with code. index.qmd is the home page. If you click inside “quarto-workflows” you’ll see a mix of filetypes!\n\n\n\nquarto-website-tutorial GitHub repository with files for webpages marked with red arrows\n\n\nThe _site folder has html files with names that should be familiar: they match the .md files we were just exploring. This folder is where Quarto stores files to build the website."
  },
  {
    "objectID": "explore.html#quarto.yml-intro",
    "href": "explore.html#quarto.yml-intro",
    "title": "Explore and setup",
    "section": "_quarto.yml intro",
    "text": "_quarto.yml intro\nThere is also a _quarto.yml file, which is the website’s configuration file. It is essentially metadata for the website that includes the order that the pages/chapters will be in. This is where you update the organization of your website: which page comes before another. If we compare side-by-side, you’ll see that the pages that appear on our website are listed there.\n\n\n\n_quarto.yml and website side-by-side\n\n\nWe’ll learn more about how to interact with _quarto.yml in Quarto Workflows."
  },
  {
    "objectID": "explore.html#fork-to-your-account",
    "href": "explore.html#fork-to-your-account",
    "title": "Explore and setup",
    "section": "Fork to your account",
    "text": "Fork to your account\nLet’s start with an existing Quarto site and copy it into your space to edit. You’ll need a free GitHub account that you create at github.com (follow this advice about choosing your username).\nFirst, choose an existing website to copy. The simplest option is to start with this site: quarto-website-tutorial.\nOther options of potential interest:\n\n2021-Cloud-Hackathon\n2022-SWOT-Ocean-Cloud-Workshop\nOpenscapes Approach-Guide\n\nNext, follow these steps to fork and setup your repo with GitHub Actions from Gavin Fay, using the repo you chose. These instructions will take ~5 minutes.\nNow you’ve got a copy of your repo of choice in your own GitHub account, and you’re set to start making your own edits. Your GitHub repo is set up with a GitHub Action that will use Quarto to rebuild and republish your site anytime you make a commit: committing will trigger the GitHub Action to rebuild and republish the book.\nNote that the GitHub Action for this book does not include R or Python so those will need to be added if your website relies on code. See https://github.com/r-lib/actions for more details and examples.\n\nDownload instead of fork\nForking might not always be the way to go - you can’t fork into the same GitHub user account or organization so if for example you want to make a copy of 2021-Cloud-Hackathon repo within the same NASA-Openscapes GitHub Organization, you’ll need to download instead of fork. In this case, follow these steps to download and copy into a new repository, and set up the GitHub Action separately.\n\nDownload github repo files\nNavigate to https://github.com/openscapes/quarto-website-tutorial (or any other quarto site repo of choice). Click the green “Code” button and select “Download ZIP”. When it downloads on your computer, unzip the files.\n\n\nCreate a new GitHub repo\nNavigate to your GitHub account or organization, and create a new repository, naming it what you’d like. You’ll need a free GitHub account that you create at github.com (follow this advice about choosing your username). When you’re logged in, github.com will show a green button that says “New” which you’ll also see as you navigate to your username’s repository page.\n\n\nAdd original site files\nTo use the GitHub file uploader, click the button next to the green “Code” button that says “Add file”. Add file > Upload files. Then, on your computer, select all the files in unzipped folder (command-A or control-A), and drag them to the GitHub uploader page. Scroll down to write a commit message, which effectively saves your files when you’re working in the browser.\nNote: if you’re comfortable cloning the new repository and copying files into it locally before committing and pushing back to GitHub, that can be preferable to the uploader, which does have limitations with complex repos (although the uploader works fine with this tutorial repo)."
  },
  {
    "objectID": "explore.html#setup-github-action",
    "href": "explore.html#setup-github-action",
    "title": "Explore and setup",
    "section": "Set up GitHub publishing",
    "text": "Set up GitHub publishing\nIf you’ve used the GitHub uploader, you’ll need to set up GitHub publishing separately. We’ll do this in a few steps: we’ll set up a GitHub Action within your repo, and create a gh-pages branch.\nFirst, the GitHub Action. Go back to your main view of your GitHub repository by clicking on the name of your repository in blue at the top-left (the url in your browser window should say https://github.com/username/repo-name).\nNext to the green code button, click Add file > Create new file. Name it exactly this: .github/workflows/quarto-publish.yml . In detail: start by typing the . with github and when you type the / it will give you a new text box to type workflows (plural!), then another /, and finally, quarto-publish.yml.\nNow you’ll have an empty new file. Paste the following in this empty file - you can click on the top-right of this box to copy all the code inside this code box:\non:\n  push:\n    branches: main\n\nname: Render and Publish\n\njobs:\n  build-deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Check out repository\n        uses: actions/checkout@v2 \n        \n      - name: Set up Quarto\n        uses: quarto-dev/quarto-actions/setup@v2\n        with:\n          # To install LaTeX to build PDF book \n          tinytex: true \n          # uncomment below and fill to pin a version\n          # version: 0.9.600\n      \n      # add software dependencies here\n\n      - name: Publish to GitHub Pages (and render)\n        uses: quarto-dev/quarto-actions/publish@v2\n        with:\n          target: gh-pages\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # this secret is always available for github actions\nCommit this to save your new quarto-publish.yml file. This is your GitHub Action.\nNext, we’ll create a new gh-pages branch. Go back to the main view of your GitHub repository. On the far left from the green “Code” button, click the button that says “main”. In the pull-down menu, type gh-pages - all lowercase, with a hyphen. Click the bold text that says “Create branch: gh-pages from main”.\nNow click on the Settings tab in the top right of your repository. On the left sidebar, click Pages. At the top of Pages under “Source”, select gh-pages root, and press Save. You’ll then see a green highlighted text saying that your site is published at a “github.io” url."
  },
  {
    "objectID": "explore.html#confirm",
    "href": "explore.html#confirm",
    "title": "Explore and setup",
    "section": "Confirm your website is published",
    "text": "Confirm your website is published\nTo confirm that your website is published, go back to your main repository page. You’ll now see an orange dot showing that the GitHub Action is beginning to publish the page.\n\n\n\nOur repo with orange dot indicating in-progress GitHub Action build\n\n\nIf you do not see this orange dot, you might need to make a small commit to trigger the GitHub Actions build. If this is the case, click the pencil on the top-right of the README.md file as circled in the image below, add some small edit (like a space after a period), and scroll down to click commit. Now you should see the orange dot.\n\n\n\n\n\nWhen your orange do becomes a green check, you can go inspect your published site at “https://username.github.io/your-repo). For example: https://openscapes.github.io/quarto-website-tutorial.\n\n\n\nOur repo with green check indicating successful GitHub Action build"
  },
  {
    "objectID": "explore.html#renaming-your-repo",
    "href": "explore.html#renaming-your-repo",
    "title": "Explore and setup",
    "section": "Renaming your repo",
    "text": "Renaming your repo\nIf you’d like to rename your repo, go to Settings and the option to rename is on the top of the main settings page."
  },
  {
    "objectID": "explore.html#onward",
    "href": "explore.html#onward",
    "title": "Explore and setup",
    "section": "Onward!",
    "text": "Onward!\nNow you are ready to start editing and publishing! The next chapter describes how starting off from the browser, using Markdown."
  },
  {
    "objectID": "sample.html",
    "href": "sample.html",
    "title": "Example of Citetools in action",
    "section": "",
    "text": "Introduction\nThis very concise sample ilustrates the use of multiple-bibliographies to separate primary (refs/primary.json) and secondary (refs/secondary.json) sources for the document; the use of citation-backlinks to turn the bibliography into an index of citations with links back to the text; and the use of citefield to print in the body of the text useful information from the bibliographic references.\nOptionally, section-bibliographies can be used to separate the bibliography into sections. For this, you must uncomment the apropriate line in the _extension.yaml file.\n\n\nThe Works of Aristotle\nThis is an example of complex use of bibliographic references. We are relying on the bibliography to print in the text the correct names of the authors, editors, and translators & title of the works.\nThe works of [@AristOp]{.author} were first edited by\n[@AristOp]{.editor} in [@AristOp]{.issued}.\nThe works of Aristotle were first edited by Bekker in 1831.\nLater, the [@DA]{.title} was edited by [@DABiehl1896]{.editor}\nin [@DABiehl1896]{.issued} [repr. in [@DATheiler]{.translator}'s\n[@DATheiler]{.issued} translation]; by [@DAForster]{.editor} in\n[@DAForster]{.issued} [repr. in [@DACorcilius]{.translator}'s\n[@DACorcilius]{.issued} translation]; and by [@DARoss]{.editor}\nin [@DARoss]{.issued}.\nLater, the De anima was edited by Biehl in 1896 [repr. in Seidl’s 1995 translation]; by Förster in 1912 [repr. in Corcilius’s 2017 translation]; and by Ross in 1961.\n\n\n\n\nPrimary Sources\n\n\n\nAristotle. 1831a. Aristotelis Opera. Edited by Immanuel Bekker. 4 vols. Berlim: Reimer. [1, 2]\n\n\n———. 1831b. “De Anima.” In Aristotelis Opera, edited by Immanuel Bekker, 402a01–435b25. Berlim: Reimer. [1]\n\n\n———. 1896. De Anima. Edited by Wilhelm Biehl. Leipzig: Teubner. [1, 2]\n\n\n———. 1912. Aristotelis de Anima Libri III. Edited by Aurél Förster. Budapeste: Hungarian Academy of Sciences. [1, 2]\n\n\n———. 1961. De Anima. Edited by William David Ross. Oxford: Clarendon. [1, 2]\n\n\nSecondary Sources\n\n\n\nAristoteles. 2017. Über Die Seele. De Anima. Translated by Klaus Corcilius. Hamburg: Felix Meiner. [1, 2]\n\n\nAristotelis. 1995. De Anima. Translated by H. Seidl and W. Theiler. Hamburg: Felix Meiner. [1]"
  },
  {
    "objectID": "quarto-workflows/browser.html",
    "href": "quarto-workflows/browser.html",
    "title": "From the Browser",
    "section": "",
    "text": "A workflow from the browser if good for getting started (since you do not need to install additional software) and for making small contributions, but is definitely limited. Once you feel comfortable here, you can move to a different setup.\nHere’s an example of editing content on an existing page."
  },
  {
    "objectID": "quarto-workflows/browser.html#edit-content-on-an-existing-page",
    "href": "quarto-workflows/browser.html#edit-content-on-an-existing-page",
    "title": "From the Browser",
    "section": "Edit content on an existing page",
    "text": "Edit content on an existing page\nLet’s change the date on the home page of this website.\nIn your repository, navigate to index.md. Then, click the pencil icon in the top right to edit directly.\n\n\n\n\n\nWe are now in the “Edit file” tab of the editor, where we can make modifications. Let’s change the date to today’s date. Click the “Preview” tab to see your changes. You can even check the “Show diff” box on the right side to see the changes you’ve made.\n\n\n\n\n\nWhile you’re here, see if there are additional changes to the text you’d like to make. Maybe changing the title or author at the top, or for the main text on the home page of the website.\nOur index.md file is written in Markdown, which enables you to make simple text formatting. As you go back and forth from “Edit file” to “Preview”, notice the patterns of how the Markdown text looks when it is as source (“Edit file”) and when it is formatted (“Preview”). For example, in Markdown, you can make text as a header with # symbols, bold or italic with * symbols, and hyperlinks with [](). Notice that spacing is important: for example, there are carriage returns (when you hit the “return” key) before any bullet points. You can learn the short list of Markdown rules here: https://quarto.org/docs/authoring/markdown-basics."
  },
  {
    "objectID": "quarto-workflows/browser.html#commit-and-publish",
    "href": "quarto-workflows/browser.html#commit-and-publish",
    "title": "From the Browser",
    "section": "Commit and publish",
    "text": "Commit and publish\nCommit your changes by scrolling to the bottom of the page and writing a commit message - a note to yourself and others about what changes you made. Write your commit message and then click the green “Commit changes” button.\n\n\n\n\n\nNow, click back to the main page of your GitHub repository. You should see the orange dot confirming your website is published. You’ll have to wait for the GitHub Action to tell quarto to build your site for you to see the update, but it will be there!"
  },
  {
    "objectID": "quarto-workflows/browser.html#limitations",
    "href": "quarto-workflows/browser.html#limitations",
    "title": "From the Browser",
    "section": "Limitations",
    "text": "Limitations\nWhile awesome that we can edit using GitHub directly from the browser, there are obvious limitations. One is that to see your edits show up in your book, you have to publish using the GitHub Action. This is slow. Another limitation is that we can only work on one file at a time and commit them each separately, which also is slow. Using additional software can make things much better, as we explore in subsequent chapters."
  },
  {
    "objectID": "quarto-workflows/jupyter.html",
    "href": "quarto-workflows/jupyter.html",
    "title": "From Jupyter",
    "section": "",
    "text": "You can interact with Quarto through JupyterLab or JupyterHub. Your Jupyter setup will involve .ipynb notebooks and the command line. Quarto’s JupyterLab tutorials has great instructions on getting started with JupyterLab, including computations and authoring.\nHere we will demonstrate how to work with this Quarto tutorial site in JupyterHub and add a Jupyter Notebook (.ipynb file). This example uses the NASA-Openscapes JupyterHub that already has all python environments as well as Quarto installed."
  },
  {
    "objectID": "quarto-workflows/jupyter.html#setup",
    "href": "quarto-workflows/jupyter.html#setup",
    "title": "From Jupyter",
    "section": "Setup",
    "text": "Setup\n\nJupyterHub\nOur JupyterHub is already setup with python environments as well as Quarto (through nasa-openscapes/corn), so there is no further installation required.\n\n\nClone your repo\nYou’ll start by cloning your repository into JupyterHub. Do this by opening a terminal (File > New > Terminal). In the Terminal, git clone your repository and cd into it:\ngit clone https://github.com/openscapes/quarto-website-tutorial\ncd quarto-website-tutorial\n\n\nInstall Quarto\nNot needed - Quarto is already installed on the NASA-Openscapes JupyterHub! But to install elsewhere you would do so from https://quarto.org/docs/get-started/.\nQuarto is a Command Line Interface (CLI), like git. Once download is complete, follow the installation prompts on your computer like you do for other software. You won’t see an application to click on when it is installed.\nNote for Mac users: If you do not have administrative privileges, please select “Install for me only” during the Destination Selection installation step (you will first click on “Change Install Location” at the Installation Type step).\nYou can check to confirm that Quarto is installed properly from the command line:\nquarto check install\n\n\n\n\n\n\nAdditional checks\n\n\n\n\n\nYou can also run:\n\nquarto check knitr to locate R, verify we have the rmarkdown package, and do a basic render\nquarto check jupyter to locate Python, verify we have Jupyter, and do a basic render\nquarto check to run all of these checks together\n\n\n\n\n\n\n\n\n\n\nHistorical aside: Install Quarto in a docker container\n\n\n\n\n\nIn Summer 2021 some NASA Mentors trying to install quarto locally was not an option, but they were able to install it inside a container using the following Dockerfile:\n#| fold: true\n#| summary: \"Show the Dockerfile\"\n\n##############################\n# This Dockerfile installs quarto and then runs quarto serve against the\n# internal /home/quarto/to_serve.\n#\n# BUILD\n# -----\n# To build this container, run\n#\n#     docker build -t quarto_serve .\n#\n# Add the --no-cache option to force docker to build fresh and get the most\n# recent version of quarto.\n#\n#\n# RUN\n# ---\n# 1. Find the directory you want quarto to serve. Let's call this /PATH/TO/earthdata-cloud-cookbook.\n# 2. Run docker:\n#\n#     docker run --rm -it -p 4848:4848 -v /PATH/TO/earthdata-cloud-cookbook:/home/quarto/to_serve quarto_serve\n#\n# 3. Open your browser and go to http://127.0.0.1:4848/\n#\n##############################\n\nFROM ubuntu:hirsute\n\n######\n# Install some command line tools we'll need\n######\nRUN apt-get update\nRUN apt-get -y install wget\nRUN apt-get -y install gdebi-core\nRUN apt-get -y install git\n\n\n######\n# Install quarto (https://quarto.org/)\n######\n\n# This is a quick and dirty way of getting the newest version number from\n# https://github.com/quarto-dev/quarto-cli/releases/latest. What's happening is\n# we're pulling the version number out of the redirect URL. This will end up\n# with QVER set to something like 0.2.11.\nRUN QVER=`wget --max-redirect 0 https://github.com/quarto-dev/quarto-cli/releases/latest 2>&1 | grep \"Location\" | sed 's/L.*tag\\/v//' | sed 's/ .*//'` \\\n    && wget -O quarto.deb \"https://github.com/quarto-dev/quarto-cli/releases/download/v$QVER/quarto-$QVER-amd64.deb\"\nRUN gdebi -n quarto.deb\n\n# Run this to make sure quarto installed correctly\nRUN quarto check install\n\n\n######\n# Create a non-root user called quarto\n######\nRUN useradd -ms /bin/bash quarto\nUSER quarto\nRUN mkdir /home/quarto/to_serve\nWORKDIR /home/quarto/to_serve\n\n\n######\n# Start quarto serve\n######\n\nCMD quarto serve --no-browse --host 0.0.0.0 --port 4848"
  },
  {
    "objectID": "quarto-workflows/jupyter.html#quarto-preview",
    "href": "quarto-workflows/jupyter.html#quarto-preview",
    "title": "From Jupyter",
    "section": "Quarto preview",
    "text": "Quarto preview\nLet’s start off by previewing our quarto site locally. In Terminal, type quarto preview, which will provide a URL with a preview of our site!\nquarto preview\n# Preparing to preview\n# Watching files for changes\n# Browse at https://openscapes.2i2c.cloud/user/jules32/proxy/4593/\nCopy this URL into another browser window; and arrange them so you can see them both. I make a bit more space in Jupyter by collapsing the left file menu by clicking on the file icon at the top of the left sidebar.\n\n\n\n\n\n\nMake a small change and preview it\nNow we’ll be able to see live changes in the preview as we edit in our .md files. Let’s try it: Change the date in index.md by opening it from the file directory. Change to today’s date, and save. Your preview window will refresh automatically! If it does not, you can also refresh the page manually. The refreshed previewed site will now display your changes!"
  },
  {
    "objectID": "quarto-workflows/jupyter.html#create-a-new-.ipynb-page",
    "href": "quarto-workflows/jupyter.html#create-a-new-.ipynb-page",
    "title": "From Jupyter",
    "section": "Create a new .ipynb page",
    "text": "Create a new .ipynb page\nLet’s add a new page to our site. Instead of an .md file like the others, let’s add a .ipynb file.\nFile > New > Notebook. Accept the default kernel by clicking Select.\n\nFirst chunk: raw yaml\nBy default, this Notebook will give us a first chunk that is code. Let’s change it to raw so that we can write our yaml at the top.\n\n\n\n\n\nIn our Raw code chunk, let’s write the title of this document. We need three dashes --- on separate lines preceding and following the title:, which you can name as you’d like.\n---\ntitle: Python Example\n---\n\n\nSecond chunk: Markdown\nLet’s add a new chunk that is Markdown so we can write some description of what this page will be.\nClick the + symbol at the top of the document, and this will add a new chunk, which by default again is a Code chunk. Change it to a Markdown Chunk following the steps we did above when switching to Raw.\nHere, write a little bit of text in Markdown. Since your title is effectively a level-1 header, avoid using level-1 headers in the rest of your document. Here is some example text I wrote:\n## Introduction\n\nThis example has some Python code that will be a part of our Quarto site.\n\n\nThird chunk: Code\nNow let’s create a new chunk with the default Code setting.\nPaste the following code (or write some of your own to test):\n#| label: fig-polar\n#| fig-cap: \"A line plot on a polar axis\"\nimport numpy as np\nimport matplotlib.pyplot as plt\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\nNow, go ahead and execute this code chunk like you normally would, by clicking the cursor in a code block and clicking the sideways “play” triangle to run the selected cells (and advance to the next cell). This code produces a plot.\nNote that the code runs as it normally would; the code options in the comments are just comments.\n\n\nSave your file\nSave your document - I’ll call mine python-example.ipynb in the main repository."
  },
  {
    "objectID": "quarto-workflows/jupyter.html#update-_quarto.yml",
    "href": "quarto-workflows/jupyter.html#update-_quarto.yml",
    "title": "From Jupyter",
    "section": "Update _quarto.yml",
    "text": "Update _quarto.yml\nNow we’ll add python-example.ipynb to our _quarto.yml file; this is where we register of all files to include in our site. Let’s add it after the section called “Basic Workflows”.\nOpen _quarto.yml by clicking on it from the file directory.\nScroll down to review the current contents in the sidebar: section. It’s there we see all the file arrangement that we see in the previewed site.\nAdd - python-example.ipynb to line 46, making sure that your indentation aligns with the other pages.\n\n\n\n\n\nYou’ll see that our new page shows up in our Preview, and the code is executed since we did that in the Jupyter Notebook itself. By default, Quarto will not execute code chunks since your computations will likely become more complex and you will want to control when they are executed (or “run”).\nSince Quarto is still previewing our website and the python-example.ipynb, the plot also displays in the notebook after the code is run and the file is saved, as shown below.\n\n\n\n\n\nSo, your normal workflow for creating and running code blocks in your Jupyter Notebook is the same one you’ll use as Quarto displays the preview."
  },
  {
    "objectID": "quarto-workflows/jupyter.html#quarto-render",
    "href": "quarto-workflows/jupyter.html#quarto-render",
    "title": "From Jupyter",
    "section": "Quarto render",
    "text": "Quarto render\nSo far we have used Quarto preview to view our website as we develop it. Quarto render will build the html elements of the website that we can see when we preview. Rendering will format the markdown text and code nicely as a website (or however is indicated in the _quarto.yml).\nBy default, Quarto render does not execute code in a Jupyter notebook. It will never run .ipynb files unless you tell it to.\n\nRender whole notebook\nIf you would like it to specifically execute code in a Jupyter notebook, you can do so in Terminal.\nOur Terminal is still busy previewing our website, so let’s open a new Terminal.\nFile > New > Terminal. Then type:\ncd quarto-website-tutorial\nquarto render python-example.ipynb --execute"
  },
  {
    "objectID": "quarto-workflows/jupyter.html#authoring-tips",
    "href": "quarto-workflows/jupyter.html#authoring-tips",
    "title": "From Jupyter",
    "section": "Authoring tips",
    "text": "Authoring tips\nQuarto.org has details about authoring, including specific instructions about authoring in Jupyter: quarto.org/docs/reference/cells/cells-jupyter."
  },
  {
    "objectID": "quarto-workflows/jupyter.html#commit-and-push",
    "href": "quarto-workflows/jupyter.html#commit-and-push",
    "title": "From Jupyter",
    "section": "Commit and push!",
    "text": "Commit and push!\nCommitting and pushing will make the changes you see locally live on your website (using the GitHub Action we set up earlier)."
  },
  {
    "objectID": "quarto-workflows/jupyter.html#troubleshooting",
    "href": "quarto-workflows/jupyter.html#troubleshooting",
    "title": "From Jupyter",
    "section": "Troubleshooting",
    "text": "Troubleshooting\n\nMy changes don’t show up in preview\nMake sure you’ve saved your file! There might be a slight delay depending on your JupyterHub/Lab setup.\n\n\nQuarto render hangs / does not complete\nCheck the specific notebook, are there any `—` throughout to denote line breaks rather than yaml? They might be causing the issue; consider deleting those.\nAlso check how long the first raw cell is. Are there level-1 headers (#)? Try removing them."
  },
  {
    "objectID": "quarto-workflows/index.html",
    "href": "quarto-workflows/index.html",
    "title": "Quarto workflows",
    "section": "",
    "text": "How do you work in Quarto? You can use whichever tool you’re comfortable with (RStudio, Jupyter, GitHub, VS Code, etc). Developing your quarto site will have the same basic workflow, no matter which tool you use. It is very iterative, and each is explored more below.\n\nAuthoring: write text, code, images, etc in a file. Supported files include .md, .Rmd, .qmd, .ipynb…\nUpdate _quarto.yml as needed (for example, if you’ve created a new file you’d like included in your site)\nRender individual files and/or the whole website\nRepeat, repeat, repeat\nCommit and push your website to GitHub, your updates will publish automatically!\nRepeat all of the above to make the website as you’d like!\n\nNote: if editing from your internet browser we won’t render in Step 3. That step will not be separate, but combined with Step 5, which will only require a commit, not a push."
  },
  {
    "objectID": "quarto-workflows/index.html#authoring",
    "href": "quarto-workflows/index.html#authoring",
    "title": "Quarto workflows",
    "section": "Authoring",
    "text": "Authoring\nAs an author, you have a lot of options of how your text will be formatted, arranged, and interlinked. You will be writing in Markdown, which is a lightweight text formatting language. The Quarto documentation about authoring introduces markdown-basics that will get you started. Also see Mine Çetinkaya-Rundel’s A Quarto tip a day.\nEach page of our site has a similar first few lines - this YAML, like we saw in our _quarto.yml and it is indicated by two sets of 3 dashes --- :\n---\ntitle: My title\n---\nYou’re able to add more features to individual pages by including it in the YAML, which for the most part here only includes a title. See Quarto excecution options for more information of what you can include in the YAML."
  },
  {
    "objectID": "quarto-workflows/index.html#update-_quarto.yml",
    "href": "quarto-workflows/index.html#update-_quarto.yml",
    "title": "Quarto workflows",
    "section": "Update _quarto.yml",
    "text": "Update _quarto.yml\nLet’s have a closer look at the _quarto.yml file.\nThis type of file (.yml or .yaml) is written in YAML (“Yet Another Markup Language”). You’ll be able to shift the arrangement of webpages by reordering/adding/deleting them in the _quarto.yml file following the patterns you see in this example.\n\n\n\n_quarto.yml and website side-by-side\n\n\nNotice that there are multiple ways in the _quarto.yml for you to include a file in your website. For example, in the above image, the “First Observations” we see in the left sidebar of the published website (right image) is represented in _quarto.yml (left image) over two lines, with line 36 indicating the file reference and line 37 indicating the text to show up in the left sidebar. However, “From RStudio” is only represented in one line of _quarto.yml, on line 43. This represents two strategies for including a file in your website. By default, the title of a specified file will show up in the website’s sidebar, which is what is happening with the “From RStudio” example. If you would like more control over what is written in the sidebar vs the title of your files, then the approach we took with “First Observations” is what you’ll want to do: you’ll see that only “First Observations” shows up in the sidebar as we specified in _quarto.yml, but the page’s title says “First Observations & Setup” (which in our preference was too long for the sidebar).\n\n\n\n\n\n\nNote\n\n\n\nAs you modify _quarto.yml, the most important thing to know is that spacing matters. Pay attention to whether text is indented by one, two, four, or other spaces, and make sure you follow it; if your site is not looking as expected it is likely a silent error in your YAML. Some text editors like RStudio provide debugging support for YAML and are highly recommended to save you time and heartache."
  },
  {
    "objectID": "quarto-workflows/index.html#install-quarto",
    "href": "quarto-workflows/index.html#install-quarto",
    "title": "Quarto workflows",
    "section": "Install Quarto",
    "text": "Install Quarto\nhttps://quarto.org/docs/get-started/ describes how to install Quarto, which will depend on your operating system. We’ll walk through installation for each tool in the next chapters."
  },
  {
    "objectID": "quarto-workflows/rstudio.html",
    "href": "quarto-workflows/rstudio.html",
    "title": "From RStudio",
    "section": "",
    "text": "The RStudio software (called an IDE, integrated development environment) is an excellent way to edit files and interface with GitHub. Plus, as it is made by the same folks who make Quarto, it has many integrated features for streamlining your workflow with Quarto, including how it previews your edits and provides debugging support for yaml! Quarto's RStudio tutorials has great instructions on getting started with RStudio, including computations and authoring.\nHere is what you’ll need to do to set up and use RStudio with Quarto."
  },
  {
    "objectID": "quarto-workflows/rstudio.html#setup",
    "href": "quarto-workflows/rstudio.html#setup",
    "title": "From RStudio",
    "section": "Setup",
    "text": "Setup\n\nRStudio and GitHub\nFor a workflow with RStudio and GitHub on your local computer, you will need four things:\n\nR\nRStudio\nGit\nGitHub\n\nFollow the UCSB MEDS Installation Guide for detailed instructions on how to create accounts, download, install, and configure on Mac and Windows. This takes about 20 minutes. (For an even more detailed walk-through, see Allison Horst’s ESM 206 Google Doc).\n\n\nClone your repo\nYou’ll start by cloning your repository into RStudio.\nFile > New Project > Version Control > Git > paste your repository name.\nR for Excel Users: Clone your repository using RStudio has detailed instructions and screenshots of these steps.\n\n\nInstall Quarto\nNext, you’ll install Quarto: https://quarto.org/docs/get-started/. After downloading, follow the installation wizard on your computer. When it is complete, you won’t see an application or any new software, but it is now available to RStudio (as well as all other applications on your computer, including the command line).\n\n\nRStudio orientation\nNow let’s take a moment to get oriented. This is an RStudio project, which is indicated in the top-right. The bottom right pane shows all the files in your project; everything we’ve cloned from GitHub. We can open any RStudio project by opening its .Rproj file, or from RStudio File > Open Project ….\n\n\n\nRStudio IDE highlighting the project name and files pane\n\n\n\n\nVisual Editor\nThe RStudio Visual Editor is quite new and has features that improve your writing experience. Working in the Visual Editor feels a bit like working in a Google Doc.\nHere’s an example showing the same file in the original Source Editor with content in markdown format and in the Visual Editor with content that looks more like it will appear in a live site. You can switch freely between these modes.\n\n\n\n\n\n\nRStudio IDE highlighting the Source Editor\n\n\n\n\n\n\n\nRStudio IDE highlighting the Visual Editor\n\n\n\n\n\nAlready have some content formatted in a Google Doc? You can copy-paste it into the Visual Editor and most formatting will be retained.\nThe editing bar provides familiar point and click access to text formatting options like bulleted or numbered lists.\n\n\n\nRStudio IDE highlighting the point and click editing bar\n\n\n\nKeyboard shortcuts\nThe Visual Editor also lets you use many keyboard shortcuts that might be familiar for adding boldface (command-b), italics (command-i), or headers. On a Mac, option-command-2 will make a level 2 header. Try it with option-command-1, or option-command-0 for normal text!\n\n\nInsert an image or figure\nTo insert an image (called a figure in Quarto), click the image icon. This brings up a window in which we can select the image, set its alignment, give it a caption and alt text, hyperlink it, or edit other metadata.\n\n\n\nInsert image or figure using the Visual Editor\n\n\nOnce an image is added, clicking on that image gives us editing options. We can resize it dynamically by clicking in the image and dragging a corner or side to resize. When an image is selected, its dimensions are displayed for editing. Clicking on the gray ellipsis to the right of the dimensions opens the pop-up window to access more metadata edits.\n\n\nInsert a table\nSimilar to adding an image, to insert a table, we click the Table dropdown."
  },
  {
    "objectID": "quarto-workflows/rstudio.html#quarto-render",
    "href": "quarto-workflows/rstudio.html#quarto-render",
    "title": "From RStudio",
    "section": "Quarto render",
    "text": "Quarto render\nIn the Build tab in the top-right pane, click “Render Website”. This will build the .html files and preview your website. It’s equivalent to “knitting” in RMarkdown.\nNote that you can also click “Preview Website”. With “Render Website” in RStudio, Quarto is able to render and preview in one step.\nIf you’d ever like to stop the preview, in the bottom-left, click on the Jobs tab and then the red Stop button.\n\nMake a small change and render it\nClick on index.md. This will open this markdown file in a fourth pane; the editor pane. Make a small change, for example change to today’s date on Line 4. Then, save your file; there is a disc icon at the top of the file.\nThen, render this file: press “Render” which is to the right of the disc icon that saves the file. This will render only this single file, as opposed to rerendering the whole website like when we clicked “Render Website” in the top right pane. Checking Render on Save (between the disc icon and the Render button) is a great strategy for doing this in one step."
  },
  {
    "objectID": "quarto-workflows/rstudio.html#create-a-new-.rmd-page",
    "href": "quarto-workflows/rstudio.html#create-a-new-.rmd-page",
    "title": "From RStudio",
    "section": "Create a new .Rmd page",
    "text": "Create a new .Rmd page\nNew > RMarkdown document > OK\nThe starter RMarkdown document has some R code inside: it displays a summary of the cars dataset that is pre-loaded into R (summary(cars)) and plots the pressure data that is also pre-loaded (plot(pressure)).\nSave this document as r-example.rmd."
  },
  {
    "objectID": "quarto-workflows/rstudio.html#update-_quarto.yml",
    "href": "quarto-workflows/rstudio.html#update-_quarto.yml",
    "title": "From RStudio",
    "section": "Update _quarto.yml",
    "text": "Update _quarto.yml\nNow we’ll add r-example.rmd to our _quarto.yml file; this is where we register all files to include in our site. Let’s add it after the section called “Quarto Workflows”.\nOpen _quarto.yml by clicking on it from the file directory.\nScroll down to review the current contents in the sidebar: section under contents:. It’s there we see all the file arrangement that we see in the previewed site.\nAdd - r-example.rmd in its own line, making sure that your indentation aligns with the other pages.\nFrom the Build tab, clicking Preview Website will recreate your website!"
  },
  {
    "objectID": "quarto-workflows/rstudio.html#authoring-tips",
    "href": "quarto-workflows/rstudio.html#authoring-tips",
    "title": "From RStudio",
    "section": "Authoring tips",
    "text": "Authoring tips\nChecking “Render on Save” is really helpful when iterating quickly on a document.\nIf the document is very code-heavy, consider using freeze that will not run the code each time.\nQuarto.org has details about authoring, including specific instructions about authoring in RStudio."
  },
  {
    "objectID": "quarto-workflows/rstudio.html#commit-and-push",
    "href": "quarto-workflows/rstudio.html#commit-and-push",
    "title": "From RStudio",
    "section": "Commit and push!",
    "text": "Commit and push!\nCommitting and pushing will make the changes you see locally live on your website (using the GitHub Action we set up earlier)."
  },
  {
    "objectID": "quarto-workflows/rstudio.html#troubleshooting",
    "href": "quarto-workflows/rstudio.html#troubleshooting",
    "title": "From RStudio",
    "section": "Troubleshooting",
    "text": "Troubleshooting\nIf you have trouble rendering your website after for example changing the extenstion of a file from .md to .qmd, refreshing your RStudio often helps. Do this by clicking the project name at the upper right of the RStudio window (in this case, quarto-website-tutorial), and underneath the “close project” section, click the same name of your project: quarto-website-tutorial. This will relaunch your whole project afresh."
  },
  {
    "objectID": "About.html",
    "href": "About.html",
    "title": "About",
    "section": "",
    "text": "Logo image generated Dall-E using Enso-like round black and white painting with ancient greek war-ship with man tied to the mast as prompt."
  },
  {
    "objectID": "About.html#license",
    "href": "About.html#license",
    "title": "About",
    "section": "License",
    "text": "License\nFilters published under the MIT license by Albert Krewinkel (tarleb).\n\nmultibib\nmultiple-bibliographies\ncitation-backlinks\nsection-bibliographies\n\nFilters published under the MIT license by Albert Krewinkel (tarleb) & Bernardo Vasconcelos (bcdavasconcelos).\n\ncitefield\n\nAll Pandoc Lua filters in this extension are published under the MIT license, see file LICENSE for details.\nBack to top"
  },
  {
    "objectID": "docs/About/index.html",
    "href": "docs/About/index.html",
    "title": "About",
    "section": "",
    "text": "Logo image generated Dall-E using Enso-like round black and white painting with ancient greek war-ship with man tied to the mast as prompt."
  },
  {
    "objectID": "docs/About/index.html#license",
    "href": "docs/About/index.html#license",
    "title": "About",
    "section": "License",
    "text": "License\nFilters published under the MIT license by Albert Krewinkel (tarleb).\n\nmultibib\nmultiple-bibliographies\ncitation-backlinks\nsection-bibliographies\n\nFilters published under the MIT license by Albert Krewinkel (tarleb) & Bernardo Vasconcelos (bcdavasconcelos).\n\ncitefield\n\nAll Pandoc Lua filters in this extension are published under the MIT license, see file LICENSE for details.\nBack to top"
  },
  {
    "objectID": "docs/About/1-About-Cite-Tools.html",
    "href": "docs/About/1-About-Cite-Tools.html",
    "title": "About Cite Tools",
    "section": "",
    "text": "Logo image generated Dall-E using Enso-like round black and white painting with ancient greek war-ship with man tied to the mast as prompt."
  },
  {
    "objectID": "docs/About/About.html",
    "href": "docs/About/About.html",
    "title": "About",
    "section": "",
    "text": "Logo image generated Dall-E using Enso-like round black and white painting with ancient greek war-ship with man tied to the mast as prompt."
  },
  {
    "objectID": "docs/About/About.html#license",
    "href": "docs/About/About.html#license",
    "title": "About",
    "section": "License",
    "text": "License\nFilters published under the MIT license by Albert Krewinkel (tarleb).\n\nmultibib\nmultiple-bibliographies\ncitation-backlinks\nsection-bibliographies\n\nFilters published under the MIT license by Albert Krewinkel (tarleb) & Bernardo Vasconcelos (bcdavasconcelos).\n\ncitefield\n\nAll Pandoc Lua filters in this extension are published under the MIT license, see file LICENSE for details.\nBack to top"
  },
  {
    "objectID": "docs/citetools/Multiple-Bibliographies/3-Advanced/index.html",
    "href": "docs/citetools/Multiple-Bibliographies/3-Advanced/index.html",
    "title": "Multiple Bibliographies in Scrivener",
    "section": "",
    "text": "In Scrivener, you can add multiple bibliographies to your project using the strategy below. Once this is done, the only task to add new bibliography files to your project will be to paste the path to one of the files in the metadata of your document. This is a very simple task, and it can be done in a few seconds.\n\n\nFirst of all, create a new meta data field called path.\nCreate a Section Type called Multibib.\nCreate a new Section in your project, and set its Section Type to Multibib.\nPaste the path to the bibliography file in the path metadata field.\nIn the Compile formats Section Layout, add the following code to the Title Sufix of the Multibib Section:\n\n {.appendix}\n\n---\nbibliography_multibib<$linkID>: \"<$custom:Path>\"\n---\n\n::: {#refs_multibib<$linkID>}\n:::"
  },
  {
    "objectID": "docs/citetools/Multiple-Bibliographies/3-Advanced/1-Using-Multiple-Bibliographies-in-Scrivener.html",
    "href": "docs/citetools/Multiple-Bibliographies/3-Advanced/1-Using-Multiple-Bibliographies-in-Scrivener.html",
    "title": "Multiple Bibliographies in Scrivener",
    "section": "",
    "text": "In Scrivener, you can add multiple bibliographies to your project using the strategy below. Once this is done, the only task to add new bibliography files to your project will be to paste the path to one of the files in the metadata of your document. This is a very simple task, and it can be done in a few seconds.\n\n\nFirst of all, create a new meta data field called path.\nCreate a Section Type called Multibib.\nCreate a new Section in your project, and set its Section Type to Multibib.\nPaste the path to the bibliography file in the path metadata field.\nIn the Compile formats Section Layout, add the following code to the Title Sufix of the Multibib Section:\n\n {.appendix}\n\n---\nbibliography_multibib<$linkID>: \"<$custom:Path>\"\n---\n\n::: {#refs_multibib<$linkID>}\n:::"
  },
  {
    "objectID": "docs/citetools/Multiple-Bibliographies/Multibib-in-Scrivener.html",
    "href": "docs/citetools/Multiple-Bibliographies/Multibib-in-Scrivener.html",
    "title": "Multiple Bibliographies in Scrivener",
    "section": "",
    "text": "In Scrivener, you can add multiple bibliographies to your project using the strategy below. Once this is done, the only task to add new bibliography files to your project will be to paste the path to one of the files in the metadata of your document. This is a very simple task, and it can be done in a few seconds.\n\n\nFirst of all, create a new meta data field called path.\nCreate a Section Type called Multibib.\nCreate a new Section in your project, and set its Section Type to Multibib.\nPaste the path to the bibliography file in the path metadata field.\nIn the Compile formats Section Layout, add the following code to the Title Sufix of the Multibib Section:\n\n {.appendix}\n\n---\nbibliography_multibib<$linkID>: \"<$custom:Path>\"\n---\n\n::: {#refs_multibib<$linkID>}\n:::"
  },
  {
    "objectID": "docs/citetools/Multiple-Bibliographies/index.html",
    "href": "docs/citetools/Multiple-Bibliographies/index.html",
    "title": "Multiple Bibliographies",
    "section": "",
    "text": "In this section, we will discuss how to use multiple bibliographies in your document. In many fields, this is conditio sine qua non for academic writing and publishing. In the humanities, for example, it is common to have a bibliography for primary sources and another for secondary sources. In philosophy, sometimes they can be very nuanced with sections dedicated to original sources, translations, commentaries, and so on."
  },
  {
    "objectID": "docs/citetools/Multiple-Bibliographies/index.html#installation",
    "href": "docs/citetools/Multiple-Bibliographies/index.html#installation",
    "title": "Multiple Bibliographies",
    "section": "Installation",
    "text": "Installation\nThis extension is available on Github and can be installed using the following command:\nquarto install extension cite-tools"
  },
  {
    "objectID": "docs/citetools/Multiple-Bibliographies/2-How-to-set-it-up.html",
    "href": "docs/citetools/Multiple-Bibliographies/2-How-to-set-it-up.html",
    "title": "How to set it up",
    "section": "",
    "text": "Add bibliography files to the refs folder. Then, add the following metadata to the YAML header of your document in this way:\n---\nbibliography_primary: refs/primary.json\nbibliography_secondary: refs/secondary.json\n---\nThe path should be relative to the project’s root folder. The name of the bibliography should (but doesn’t have to) be the same as the name of the file, without the extension.\nThen, place the bibliographies placeholders in the document where you want the bibliographies to appear.\n# Primary Sources\n\n::: {#refs_primary}\n:::\n\n# Secondary Sources\n\n::: {#refs_secondary}\n:::\nEach refs_bib_name div should have a matching entry bibliography_bib_name in the metadata. They will be filled with the citations from the respective bibliography files.\nMake sure the bibliography name (bibliography_) and the placeholder div id (refs_) match, otherwise nothing will print.1\n\n\n\n\nFootnotes\n\n\nThat is, if you have a bibliography named bibliography_primary, the placeholder div should be refs-primary or refs_primary.↩︎"
  },
  {
    "objectID": "docs/citetools/Multiple-Bibliographies/1-Prime-Matter.html",
    "href": "docs/citetools/Multiple-Bibliographies/1-Prime-Matter.html",
    "title": "Prime Matter",
    "section": "",
    "text": "First of all, you will need to be able to provide a bibliography file in one of different possible formats. The most common ones are called BibLaTeX or BibTeX. However, you can also use CSL-JSON files, which is preferable since the latter faster and it is the format used by Citeproc internally to represent bibliographies.\nThere are many ways to provide a bibliography file. The most common ones are:\n\nKeeping a bibliography file yourself and updating it manually. (Viable only it small projects.)\nUsing a bibliography manager, such as Zotero, JabRef, Bookends, Bibdesk, Endnote; see also this comparison on Wikipedia. These programs allows you to edit your bibliography and export it in the desired format.\nUsing a shared bibliography on Github or a shared Zotero online library1.\n\nThe important detail here is that you need to be able to export your bibliography in one of the formats mentioned above and that you need to be able to create more than one bibliography file. Once you have this, you can proceed to the next step.\n\n\n\n\n\n\nrefs/primary.bib\n\n\n\nKeeping bibliography files inside /refs at the project’s root folder is not a requirement, but it is good pratice.\n\n\n\n\n\n\n\n\nCite Tools, not a bibliography manager\n\n\n\nThis extension is not a bibliography manager. It does not allow you to edit your bibliography. It only allows you to use multiple bibliographies in your document.\n\n\n\n\n\n\nFootnotes\n\n\nZotero online libraries can be downloaded using https://api.zotero.org/groups/LibraryIDhere/items?format=bibtex&limit=150) where LibraryIDhere should be replaced by the 7-digit code in the middle of the library URL↩︎"
  }
]